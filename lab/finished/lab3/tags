!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALLOC_ZERO	./kern/pmap.h	/^	ALLOC_ZERO = 1<<0,$/;"	e	enum:__anon1
CGA_BASE	./kern/console.h	13;"	d
CGA_BUF	./kern/console.h	14;"	d
CMDBYTE	./inc/kbdreg.h	60;"	d
CR0_AM	./inc/mmu.h	86;"	d
CR0_CD	./inc/mmu.h	88;"	d
CR0_EM	./inc/mmu.h	81;"	d
CR0_ET	./inc/mmu.h	83;"	d
CR0_MP	./inc/mmu.h	80;"	d
CR0_NE	./inc/mmu.h	84;"	d
CR0_NW	./inc/mmu.h	87;"	d
CR0_PE	./inc/mmu.h	79;"	d
CR0_PG	./inc/mmu.h	89;"	d
CR0_TS	./inc/mmu.h	82;"	d
CR0_WP	./inc/mmu.h	85;"	d
CR4_DE	./inc/mmu.h	94;"	d
CR4_MCE	./inc/mmu.h	92;"	d
CR4_PCE	./inc/mmu.h	91;"	d
CR4_PSE	./inc/mmu.h	93;"	d
CR4_PVI	./inc/mmu.h	96;"	d
CR4_TSD	./inc/mmu.h	95;"	d
CR4_VME	./inc/mmu.h	97;"	d
CRT_COLS	./kern/console.h	17;"	d
CRT_ROWS	./kern/console.h	16;"	d
CRT_SIZE	./kern/console.h	18;"	d
ELF_MAGIC	./inc/elf.h	4;"	d
ELF_PROG_FLAG_EXEC	./inc/elf.h	52;"	d
ELF_PROG_FLAG_READ	./inc/elf.h	54;"	d
ELF_PROG_FLAG_WRITE	./inc/elf.h	53;"	d
ELF_PROG_LOAD	./inc/elf.h	49;"	d
ELF_SHN_UNDEF	./inc/elf.h	63;"	d
ELF_SHT_NULL	./inc/elf.h	57;"	d
ELF_SHT_PROGBITS	./inc/elf.h	58;"	d
ELF_SHT_STRTAB	./inc/elf.h	60;"	d
ELF_SHT_SYMTAB	./inc/elf.h	59;"	d
ENVX	./inc/env.h	30;"	d
ENV_CREATE	./kern/env.h	28;"	d
ENV_DYING	./inc/env.h	/^	ENV_DYING,$/;"	e	enum:__anon4
ENV_FREE	./inc/env.h	/^	ENV_FREE = 0,$/;"	e	enum:__anon4
ENV_NOT_RUNNABLE	./inc/env.h	/^	ENV_NOT_RUNNABLE$/;"	e	enum:__anon4
ENV_PASTE3	./kern/env.h	26;"	d
ENV_RUNNABLE	./inc/env.h	/^	ENV_RUNNABLE,$/;"	e	enum:__anon4
ENV_RUNNING	./inc/env.h	/^	ENV_RUNNING,$/;"	e	enum:__anon4
ENV_TYPE_USER	./inc/env.h	/^	ENV_TYPE_USER = 0,$/;"	e	enum:EnvType
EXTPHYSMEM	./inc/memlayout.h	93;"	d
E_BAD_ENV	./inc/error.h	/^	E_BAD_ENV	= 2,	\/\/ Environment doesn't exist or otherwise$/;"	e	enum:__anon2
E_FAULT	./inc/error.h	/^	E_FAULT		= 6,	\/\/ Memory fault$/;"	e	enum:__anon2
E_INVAL	./inc/error.h	/^	E_INVAL		= 3,	\/\/ Invalid parameter$/;"	e	enum:__anon2
E_NO_FREE_ENV	./inc/error.h	/^	E_NO_FREE_ENV	= 5,	\/\/ Attempt to create a new environment beyond$/;"	e	enum:__anon2
E_NO_MEM	./inc/error.h	/^	E_NO_MEM	= 4,	\/\/ Request failed due to memory shortage$/;"	e	enum:__anon2
E_NO_SYS	./inc/error.h	/^	E_NO_SYS	= 7,	\/\/ Unimplemented system call$/;"	e	enum:__anon2
E_UNSPECIFIED	./inc/error.h	/^	E_UNSPECIFIED	= 1,	\/\/ Unspecified or unknown problem$/;"	e	enum:__anon2
Eipdebuginfo	./kern/kdebug.h	/^struct Eipdebuginfo {$/;"	s
Eipdebuginfo::eip_file	./kern/kdebug.h	/^	const char *eip_file;		\/\/ Source code filename for EIP$/;"	m	struct:Eipdebuginfo	access:public
Eipdebuginfo::eip_fn_addr	./kern/kdebug.h	/^	uintptr_t eip_fn_addr;		\/\/ Address of start of function$/;"	m	struct:Eipdebuginfo	access:public
Eipdebuginfo::eip_fn_name	./kern/kdebug.h	/^	const char *eip_fn_name;	\/\/ Name of function containing EIP$/;"	m	struct:Eipdebuginfo	access:public
Eipdebuginfo::eip_fn_namelen	./kern/kdebug.h	/^	int eip_fn_namelen;		\/\/ Length of function name$/;"	m	struct:Eipdebuginfo	access:public
Eipdebuginfo::eip_fn_narg	./kern/kdebug.h	/^	int eip_fn_narg;		\/\/ Number of function arguments$/;"	m	struct:Eipdebuginfo	access:public
Eipdebuginfo::eip_line	./kern/kdebug.h	/^	int eip_line;			\/\/ Source code linenumber for EIP$/;"	m	struct:Eipdebuginfo	access:public
Elf	./inc/elf.h	/^struct Elf {$/;"	s
Elf::e_ehsize	./inc/elf.h	/^	uint16_t e_ehsize;$/;"	m	struct:Elf	access:public
Elf::e_elf	./inc/elf.h	/^	uint8_t e_elf[12];$/;"	m	struct:Elf	access:public
Elf::e_entry	./inc/elf.h	/^	uint32_t e_entry;$/;"	m	struct:Elf	access:public
Elf::e_flags	./inc/elf.h	/^	uint32_t e_flags;$/;"	m	struct:Elf	access:public
Elf::e_machine	./inc/elf.h	/^	uint16_t e_machine;$/;"	m	struct:Elf	access:public
Elf::e_magic	./inc/elf.h	/^	uint32_t e_magic;	\/\/ must equal ELF_MAGIC$/;"	m	struct:Elf	access:public
Elf::e_phentsize	./inc/elf.h	/^	uint16_t e_phentsize;$/;"	m	struct:Elf	access:public
Elf::e_phnum	./inc/elf.h	/^	uint16_t e_phnum;$/;"	m	struct:Elf	access:public
Elf::e_phoff	./inc/elf.h	/^	uint32_t e_phoff;$/;"	m	struct:Elf	access:public
Elf::e_shentsize	./inc/elf.h	/^	uint16_t e_shentsize;$/;"	m	struct:Elf	access:public
Elf::e_shnum	./inc/elf.h	/^	uint16_t e_shnum;$/;"	m	struct:Elf	access:public
Elf::e_shoff	./inc/elf.h	/^	uint32_t e_shoff;$/;"	m	struct:Elf	access:public
Elf::e_shstrndx	./inc/elf.h	/^	uint16_t e_shstrndx;$/;"	m	struct:Elf	access:public
Elf::e_type	./inc/elf.h	/^	uint16_t e_type;$/;"	m	struct:Elf	access:public
Elf::e_version	./inc/elf.h	/^	uint32_t e_version;$/;"	m	struct:Elf	access:public
Env	./inc/env.h	/^struct Env {$/;"	s
Env::env_id	./inc/env.h	/^	envid_t env_id;			\/\/ Unique environment identifier$/;"	m	struct:Env	access:public
Env::env_link	./inc/env.h	/^	struct Env *env_link;		\/\/ Next free Env$/;"	m	struct:Env	typeref:struct:Env::Env	access:public
Env::env_parent_id	./inc/env.h	/^	envid_t env_parent_id;		\/\/ env_id of this env's parent$/;"	m	struct:Env	access:public
Env::env_pgdir	./inc/env.h	/^	pde_t *env_pgdir;		\/\/ Kernel virtual address of page dir$/;"	m	struct:Env	access:public
Env::env_runs	./inc/env.h	/^	uint32_t env_runs;		\/\/ Number of times environment has run$/;"	m	struct:Env	access:public
Env::env_status	./inc/env.h	/^	unsigned env_status;		\/\/ Status of the environment$/;"	m	struct:Env	access:public
Env::env_tf	./inc/env.h	/^	struct Trapframe env_tf;	\/\/ Saved registers$/;"	m	struct:Env	typeref:struct:Env::Trapframe	access:public
Env::env_type	./inc/env.h	/^	enum EnvType env_type;		\/\/ Indicates special system environments$/;"	m	struct:Env	typeref:enum:Env::EnvType	access:public
EnvType	./inc/env.h	/^enum EnvType {$/;"	g
FEC_PR	./inc/mmu.h	123;"	d
FEC_U	./inc/mmu.h	125;"	d
FEC_WR	./inc/mmu.h	124;"	d
FL_AC	./inc/mmu.h	117;"	d
FL_AF	./inc/mmu.h	102;"	d
FL_CF	./inc/mmu.h	100;"	d
FL_DF	./inc/mmu.h	107;"	d
FL_ID	./inc/mmu.h	120;"	d
FL_IF	./inc/mmu.h	106;"	d
FL_IOPL_0	./inc/mmu.h	110;"	d
FL_IOPL_1	./inc/mmu.h	111;"	d
FL_IOPL_2	./inc/mmu.h	112;"	d
FL_IOPL_3	./inc/mmu.h	113;"	d
FL_IOPL_MASK	./inc/mmu.h	109;"	d
FL_NT	./inc/mmu.h	114;"	d
FL_OF	./inc/mmu.h	108;"	d
FL_PF	./inc/mmu.h	101;"	d
FL_RF	./inc/mmu.h	115;"	d
FL_SF	./inc/mmu.h	104;"	d
FL_TF	./inc/mmu.h	105;"	d
FL_VIF	./inc/mmu.h	118;"	d
FL_VIP	./inc/mmu.h	119;"	d
FL_VM	./inc/mmu.h	116;"	d
FL_ZF	./inc/mmu.h	103;"	d
GD_KD	./inc/memlayout.h	16;"	d
GD_KT	./inc/memlayout.h	15;"	d
GD_TSS0	./inc/memlayout.h	19;"	d
GD_UD	./inc/memlayout.h	18;"	d
GD_UT	./inc/memlayout.h	17;"	d
Gatedesc	./inc/mmu.h	/^struct Gatedesc {$/;"	s
Gatedesc::gd_args	./inc/mmu.h	/^	unsigned gd_args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:Gatedesc	access:public
Gatedesc::gd_dpl	./inc/mmu.h	/^	unsigned gd_dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:Gatedesc	access:public
Gatedesc::gd_off_15_0	./inc/mmu.h	/^	unsigned gd_off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:Gatedesc	access:public
Gatedesc::gd_off_31_16	./inc/mmu.h	/^	unsigned gd_off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:Gatedesc	access:public
Gatedesc::gd_p	./inc/mmu.h	/^	unsigned gd_p : 1;           \/\/ Present$/;"	m	struct:Gatedesc	access:public
Gatedesc::gd_rsv1	./inc/mmu.h	/^	unsigned gd_rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:Gatedesc	access:public
Gatedesc::gd_s	./inc/mmu.h	/^	unsigned gd_s : 1;           \/\/ must be 0 (system)$/;"	m	struct:Gatedesc	access:public
Gatedesc::gd_sel	./inc/mmu.h	/^	unsigned gd_sel : 16;        \/\/ segment selector$/;"	m	struct:Gatedesc	access:public
Gatedesc::gd_type	./inc/mmu.h	/^	unsigned gd_type : 4;        \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:Gatedesc	access:public
IOPHYSMEM	./inc/memlayout.h	92;"	d
IO_RTC	./kern/kclock.h	9;"	d
IRQ_ERROR	./inc/trap.h	40;"	d
IRQ_IDE	./inc/trap.h	39;"	d
IRQ_KBD	./inc/trap.h	36;"	d
IRQ_OFFSET	./inc/trap.h	32;"	d
IRQ_SERIAL	./inc/trap.h	37;"	d
IRQ_SPURIOUS	./inc/trap.h	38;"	d
IRQ_TIMER	./inc/trap.h	35;"	d
JOS_INC_ASSERT_H	./inc/assert.h	4;"	d
JOS_INC_ELF_H	./inc/elf.h	2;"	d
JOS_INC_ENV_H	./inc/env.h	4;"	d
JOS_INC_ERROR_H	./inc/error.h	4;"	d
JOS_INC_LIB_H	./inc/lib.h	8;"	d
JOS_INC_MEMLAYOUT_H	./inc/memlayout.h	2;"	d
JOS_INC_MMU_H	./inc/mmu.h	2;"	d
JOS_INC_STDARG_H	./inc/stdarg.h	4;"	d
JOS_INC_STDIO_H	./inc/stdio.h	2;"	d
JOS_INC_STRING_H	./inc/string.h	2;"	d
JOS_INC_SYSCALL_H	./inc/syscall.h	2;"	d
JOS_INC_TRAP_H	./inc/trap.h	2;"	d
JOS_INC_TYPES_H	./inc/types.h	2;"	d
JOS_INC_X86_H	./inc/x86.h	2;"	d
JOS_KBDREG_H	./inc/kbdreg.h	2;"	d
JOS_KERN_ENV_H	./kern/env.h	4;"	d
JOS_KERN_KCLOCK_H	./kern/kclock.h	4;"	d
JOS_KERN_KDEBUG_H	./kern/kdebug.h	2;"	d
JOS_KERN_MONITOR_H	./kern/monitor.h	2;"	d
JOS_KERN_PMAP_H	./kern/pmap.h	4;"	d
JOS_KERN_SYSCALL_H	./kern/syscall.h	2;"	d
JOS_KERN_TRAP_H	./kern/trap.h	4;"	d
JOS_STAB_H	./inc/stab.h	2;"	d
KADDR	./kern/pmap.h	38;"	d
KBCMDP	./inc/kbdreg.h	29;"	d
KBC_AUXDISABLE	./inc/kbdreg.h	32;"	d
KBC_AUXECHO	./inc/kbdreg.h	36;"	d
KBC_AUXENABLE	./inc/kbdreg.h	33;"	d
KBC_AUXTEST	./inc/kbdreg.h	34;"	d
KBC_AUXWRITE	./inc/kbdreg.h	37;"	d
KBC_DISABLE	./inc/kbdreg.h	66;"	d
KBC_ECHO	./inc/kbdreg.h	71;"	d
KBC_ENABLE	./inc/kbdreg.h	67;"	d
KBC_KBDDISABLE	./inc/kbdreg.h	40;"	d
KBC_KBDECHO	./inc/kbdreg.h	35;"	d
KBC_KBDENABLE	./inc/kbdreg.h	41;"	d
KBC_KBDTEST	./inc/kbdreg.h	39;"	d
KBC_MODEIND	./inc/kbdreg.h	70;"	d
KBC_PULSE0	./inc/kbdreg.h	42;"	d
KBC_PULSE1	./inc/kbdreg.h	43;"	d
KBC_PULSE2	./inc/kbdreg.h	44;"	d
KBC_PULSE3	./inc/kbdreg.h	45;"	d
KBC_RAMREAD	./inc/kbdreg.h	30;"	d
KBC_RAMWRITE	./inc/kbdreg.h	31;"	d
KBC_RESEND	./inc/kbdreg.h	64;"	d
KBC_RESET	./inc/kbdreg.h	63;"	d
KBC_SELFTEST	./inc/kbdreg.h	38;"	d
KBC_SETDEFAULT	./inc/kbdreg.h	65;"	d
KBC_SETTABLE	./inc/kbdreg.h	69;"	d
KBC_TYPEMATIC	./inc/kbdreg.h	68;"	d
KBDATAP	./inc/kbdreg.h	47;"	d
KBOUTP	./inc/kbdreg.h	48;"	d
KBR_ACK	./inc/kbdreg.h	76;"	d
KBR_BREAK	./inc/kbdreg.h	79;"	d
KBR_ECHO	./inc/kbdreg.h	81;"	d
KBR_EXTENDED	./inc/kbdreg.h	74;"	d
KBR_FAILURE	./inc/kbdreg.h	78;"	d
KBR_OVERRUN	./inc/kbdreg.h	77;"	d
KBR_RESEND	./inc/kbdreg.h	75;"	d
KBR_RSTDONE	./inc/kbdreg.h	80;"	d
KBSTATP	./inc/kbdreg.h	19;"	d
KBS_DIB	./inc/kbdreg.h	20;"	d
KBS_IBF	./inc/kbdreg.h	21;"	d
KBS_NOSEC	./inc/kbdreg.h	24;"	d
KBS_OCMD	./inc/kbdreg.h	23;"	d
KBS_PERR	./inc/kbdreg.h	27;"	d
KBS_RERR	./inc/kbdreg.h	26;"	d
KBS_TERR	./inc/kbdreg.h	25;"	d
KBS_WARM	./inc/kbdreg.h	22;"	d
KC8_CPU	./inc/kbdreg.h	57;"	d
KC8_IGNSEC	./inc/kbdreg.h	56;"	d
KC8_KDISABLE	./inc/kbdreg.h	55;"	d
KC8_KENABLE	./inc/kbdreg.h	59;"	d
KC8_MDISABLE	./inc/kbdreg.h	54;"	d
KC8_MENABLE	./inc/kbdreg.h	58;"	d
KC8_TRANS	./inc/kbdreg.h	53;"	d
KERNBASE	./inc/memlayout.h	87;"	d
KEY_DEL	./inc/kbdreg.h	14;"	d
KEY_DN	./inc/kbdreg.h	8;"	d
KEY_END	./inc/kbdreg.h	6;"	d
KEY_HOME	./inc/kbdreg.h	5;"	d
KEY_INS	./inc/kbdreg.h	13;"	d
KEY_LF	./inc/kbdreg.h	9;"	d
KEY_PGDN	./inc/kbdreg.h	12;"	d
KEY_PGUP	./inc/kbdreg.h	11;"	d
KEY_RT	./inc/kbdreg.h	10;"	d
KEY_UP	./inc/kbdreg.h	7;"	d
KSTACKTOP	./inc/memlayout.h	96;"	d
KSTKGAP	./inc/memlayout.h	98;"	d
KSTKSIZE	./inc/memlayout.h	97;"	d
K_LDCMDBYTE	./inc/kbdreg.h	51;"	d
K_RDCMDBYTE	./inc/kbdreg.h	50;"	d
LOG2NENV	./inc/env.h	28;"	d
MAX	./inc/types.h	49;"	d
MAXERROR	./inc/error.h	/^	MAXERROR$/;"	e	enum:__anon2
MC_NVRAM_SIZE	./kern/kclock.h	12;"	d
MC_NVRAM_START	./kern/kclock.h	11;"	d
MIN	./inc/types.h	43;"	d
MMIOBASE	./inc/memlayout.h	102;"	d
MMIOLIM	./inc/memlayout.h	101;"	d
MONO_BASE	./kern/console.h	11;"	d
MONO_BUF	./kern/console.h	12;"	d
NENV	./inc/env.h	29;"	d
NPDENTRIES	./inc/mmu.h	45;"	d
NPTENTRIES	./inc/mmu.h	46;"	d
NSYSCALLS	./inc/syscall.h	/^	NSYSCALLS$/;"	e	enum:__anon5
NULL	./inc/stdio.h	7;"	d
NULL	./inc/types.h	5;"	d
NVRAM_BASEHI	./kern/kclock.h	16;"	d
NVRAM_BASELO	./kern/kclock.h	15;"	d
NVRAM_CENTURY	./kern/kclock.h	27;"	d
NVRAM_EXTHI	./kern/kclock.h	20;"	d
NVRAM_EXTLO	./kern/kclock.h	19;"	d
NVRAM_PEXTHI	./kern/kclock.h	24;"	d
NVRAM_PEXTLO	./kern/kclock.h	23;"	d
N_BCOMM	./inc/stab.h	37;"	d
N_BINCL	./inc/stab.h	29;"	d
N_BSLINE	./inc/stab.h	25;"	d
N_DSLINE	./inc/stab.h	24;"	d
N_ECOML	./inc/stab.h	39;"	d
N_ECOMM	./inc/stab.h	38;"	d
N_EINCL	./inc/stab.h	32;"	d
N_ENTRY	./inc/stab.h	33;"	d
N_EXCL	./inc/stab.h	35;"	d
N_FNAME	./inc/stab.h	16;"	d
N_FUN	./inc/stab.h	17;"	d
N_GSYM	./inc/stab.h	15;"	d
N_LBRAC	./inc/stab.h	34;"	d
N_LCSYM	./inc/stab.h	19;"	d
N_LENG	./inc/stab.h	40;"	d
N_LSYM	./inc/stab.h	28;"	d
N_MAIN	./inc/stab.h	20;"	d
N_PC	./inc/stab.h	21;"	d
N_PSYM	./inc/stab.h	31;"	d
N_RBRAC	./inc/stab.h	36;"	d
N_RSYM	./inc/stab.h	22;"	d
N_SLINE	./inc/stab.h	23;"	d
N_SO	./inc/stab.h	27;"	d
N_SOL	./inc/stab.h	30;"	d
N_SSYM	./inc/stab.h	26;"	d
N_STSYM	./inc/stab.h	18;"	d
O_ACCMODE	./inc/lib.h	49;"	d
O_CREAT	./inc/lib.h	51;"	d
O_EXCL	./inc/lib.h	53;"	d
O_MKDIR	./inc/lib.h	54;"	d
O_RDONLY	./inc/lib.h	46;"	d
O_RDWR	./inc/lib.h	48;"	d
O_TRUNC	./inc/lib.h	52;"	d
O_WRONLY	./inc/lib.h	47;"	d
PADDR	./kern/pmap.h	26;"	d
PDX	./inc/mmu.h	33;"	d
PDXSHIFT	./inc/mmu.h	55;"	d
PFTEMP	./inc/memlayout.h	137;"	d
PGADDR	./inc/mmu.h	42;"	d
PGNUM	./inc/mmu.h	30;"	d
PGOFF	./inc/mmu.h	39;"	d
PGSHIFT	./inc/mmu.h	49;"	d
PGSIZE	./inc/mmu.h	48;"	d
PTE_A	./inc/mmu.h	63;"	d
PTE_ADDR	./inc/mmu.h	76;"	d
PTE_AVAIL	./inc/mmu.h	70;"	d
PTE_D	./inc/mmu.h	64;"	d
PTE_G	./inc/mmu.h	66;"	d
PTE_P	./inc/mmu.h	58;"	d
PTE_PCD	./inc/mmu.h	62;"	d
PTE_PS	./inc/mmu.h	65;"	d
PTE_PWT	./inc/mmu.h	61;"	d
PTE_SYSCALL	./inc/mmu.h	73;"	d
PTE_U	./inc/mmu.h	60;"	d
PTE_W	./inc/mmu.h	59;"	d
PTSHIFT	./inc/mmu.h	52;"	d
PTSIZE	./inc/mmu.h	51;"	d
PTX	./inc/mmu.h	36;"	d
PTXSHIFT	./inc/mmu.h	54;"	d
PageInfo	./inc/memlayout.h	/^struct PageInfo {$/;"	s
PageInfo::pp_link	./inc/memlayout.h	/^	struct PageInfo *pp_link;$/;"	m	struct:PageInfo	typeref:struct:PageInfo::PageInfo	access:public
PageInfo::pp_ref	./inc/memlayout.h	/^	uint16_t pp_ref;$/;"	m	struct:PageInfo	access:public
Proghdr	./inc/elf.h	/^struct Proghdr {$/;"	s
Proghdr::p_align	./inc/elf.h	/^	uint32_t p_align;$/;"	m	struct:Proghdr	access:public
Proghdr::p_filesz	./inc/elf.h	/^	uint32_t p_filesz;$/;"	m	struct:Proghdr	access:public
Proghdr::p_flags	./inc/elf.h	/^	uint32_t p_flags;$/;"	m	struct:Proghdr	access:public
Proghdr::p_memsz	./inc/elf.h	/^	uint32_t p_memsz;$/;"	m	struct:Proghdr	access:public
Proghdr::p_offset	./inc/elf.h	/^	uint32_t p_offset;$/;"	m	struct:Proghdr	access:public
Proghdr::p_pa	./inc/elf.h	/^	uint32_t p_pa;$/;"	m	struct:Proghdr	access:public
Proghdr::p_type	./inc/elf.h	/^	uint32_t p_type;$/;"	m	struct:Proghdr	access:public
Proghdr::p_va	./inc/elf.h	/^	uint32_t p_va;$/;"	m	struct:Proghdr	access:public
Pseudodesc	./inc/mmu.h	/^struct Pseudodesc {$/;"	s
Pseudodesc::pd_base	./inc/mmu.h	/^	uint32_t pd_base;		\/\/ Base address$/;"	m	struct:Pseudodesc	access:public
Pseudodesc::pd_lim	./inc/mmu.h	/^	uint16_t pd_lim;		\/\/ Limit$/;"	m	struct:Pseudodesc	access:public
PushRegs	./inc/trap.h	/^struct PushRegs {$/;"	s
PushRegs::reg_eax	./inc/trap.h	/^	uint32_t reg_eax;$/;"	m	struct:PushRegs	access:public
PushRegs::reg_ebp	./inc/trap.h	/^	uint32_t reg_ebp;$/;"	m	struct:PushRegs	access:public
PushRegs::reg_ebx	./inc/trap.h	/^	uint32_t reg_ebx;$/;"	m	struct:PushRegs	access:public
PushRegs::reg_ecx	./inc/trap.h	/^	uint32_t reg_ecx;$/;"	m	struct:PushRegs	access:public
PushRegs::reg_edi	./inc/trap.h	/^	uint32_t reg_edi;$/;"	m	struct:PushRegs	access:public
PushRegs::reg_edx	./inc/trap.h	/^	uint32_t reg_edx;$/;"	m	struct:PushRegs	access:public
PushRegs::reg_esi	./inc/trap.h	/^	uint32_t reg_esi;$/;"	m	struct:PushRegs	access:public
PushRegs::reg_oesp	./inc/trap.h	/^	uint32_t reg_oesp;		\/* Useless *\/$/;"	m	struct:PushRegs	access:public
ROUNDDOWN	./inc/types.h	58;"	d
ROUNDUP	./inc/types.h	64;"	d
SEG	./inc/mmu.h	142;"	d
SEG	./inc/mmu.h	172;"	d
SEG16	./inc/mmu.h	176;"	d
SEG_FAULT	./inc/mmu.h	170;"	d
SEG_NULL	./inc/mmu.h	139;"	d
SEG_NULL	./inc/mmu.h	168;"	d
SETCALLGATE	./inc/mmu.h	296;"	d
SETGATE	./inc/mmu.h	282;"	d
STA_A	./inc/mmu.h	189;"	d
STA_C	./inc/mmu.h	186;"	d
STA_E	./inc/mmu.h	185;"	d
STA_R	./inc/mmu.h	188;"	d
STA_W	./inc/mmu.h	187;"	d
STA_X	./inc/mmu.h	184;"	d
STS_CG16	./inc/mmu.h	195;"	d
STS_CG32	./inc/mmu.h	201;"	d
STS_IG16	./inc/mmu.h	197;"	d
STS_IG32	./inc/mmu.h	202;"	d
STS_LDT	./inc/mmu.h	193;"	d
STS_T16A	./inc/mmu.h	192;"	d
STS_T16B	./inc/mmu.h	194;"	d
STS_T32A	./inc/mmu.h	199;"	d
STS_T32B	./inc/mmu.h	200;"	d
STS_TG	./inc/mmu.h	196;"	d
STS_TG16	./inc/mmu.h	198;"	d
STS_TG32	./inc/mmu.h	203;"	d
SYS_cgetc	./inc/syscall.h	/^	SYS_cgetc,$/;"	e	enum:__anon5
SYS_cputs	./inc/syscall.h	/^	SYS_cputs = 0,$/;"	e	enum:__anon5
SYS_env_destroy	./inc/syscall.h	/^	SYS_env_destroy,$/;"	e	enum:__anon5
SYS_getenvid	./inc/syscall.h	/^	SYS_getenvid,$/;"	e	enum:__anon5
Secthdr	./inc/elf.h	/^struct Secthdr {$/;"	s
Secthdr::sh_addr	./inc/elf.h	/^	uint32_t sh_addr;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_addralign	./inc/elf.h	/^	uint32_t sh_addralign;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_entsize	./inc/elf.h	/^	uint32_t sh_entsize;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_flags	./inc/elf.h	/^	uint32_t sh_flags;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_info	./inc/elf.h	/^	uint32_t sh_info;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_link	./inc/elf.h	/^	uint32_t sh_link;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_name	./inc/elf.h	/^	uint32_t sh_name;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_offset	./inc/elf.h	/^	uint32_t sh_offset;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_size	./inc/elf.h	/^	uint32_t sh_size;$/;"	m	struct:Secthdr	access:public
Secthdr::sh_type	./inc/elf.h	/^	uint32_t sh_type;$/;"	m	struct:Secthdr	access:public
Segdesc	./inc/mmu.h	/^struct Segdesc {$/;"	s
Segdesc::sd_avl	./inc/mmu.h	/^	unsigned sd_avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:Segdesc	access:public
Segdesc::sd_base_15_0	./inc/mmu.h	/^	unsigned sd_base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:Segdesc	access:public
Segdesc::sd_base_23_16	./inc/mmu.h	/^	unsigned sd_base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:Segdesc	access:public
Segdesc::sd_base_31_24	./inc/mmu.h	/^	unsigned sd_base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:Segdesc	access:public
Segdesc::sd_db	./inc/mmu.h	/^	unsigned sd_db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:Segdesc	access:public
Segdesc::sd_dpl	./inc/mmu.h	/^	unsigned sd_dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:Segdesc	access:public
Segdesc::sd_g	./inc/mmu.h	/^	unsigned sd_g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:Segdesc	access:public
Segdesc::sd_lim_15_0	./inc/mmu.h	/^	unsigned sd_lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:Segdesc	access:public
Segdesc::sd_lim_19_16	./inc/mmu.h	/^	unsigned sd_lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:Segdesc	access:public
Segdesc::sd_p	./inc/mmu.h	/^	unsigned sd_p : 1;          \/\/ Present$/;"	m	struct:Segdesc	access:public
Segdesc::sd_rsv1	./inc/mmu.h	/^	unsigned sd_rsv1 : 1;       \/\/ Reserved$/;"	m	struct:Segdesc	access:public
Segdesc::sd_s	./inc/mmu.h	/^	unsigned sd_s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:Segdesc	access:public
Segdesc::sd_type	./inc/mmu.h	/^	unsigned sd_type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:Segdesc	access:public
Stab	./inc/stab.h	/^struct Stab {$/;"	s
Stab::n_desc	./inc/stab.h	/^	uint16_t n_desc;        \/\/ description field$/;"	m	struct:Stab	access:public
Stab::n_other	./inc/stab.h	/^	uint8_t n_other;        \/\/ misc info (usually empty)$/;"	m	struct:Stab	access:public
Stab::n_strx	./inc/stab.h	/^	uint32_t n_strx;	\/\/ index into string table of name$/;"	m	struct:Stab	access:public
Stab::n_type	./inc/stab.h	/^	uint8_t n_type;         \/\/ type of symbol$/;"	m	struct:Stab	access:public
Stab::n_value	./inc/stab.h	/^	uintptr_t n_value;	\/\/ value of symbol$/;"	m	struct:Stab	access:public
T_ALIGN	./inc/trap.h	23;"	d
T_BOUND	./inc/trap.h	11;"	d
T_BRKPT	./inc/trap.h	9;"	d
T_DBLFLT	./inc/trap.h	14;"	d
T_DEBUG	./inc/trap.h	7;"	d
T_DEFAULT	./inc/trap.h	30;"	d
T_DEVICE	./inc/trap.h	13;"	d
T_DIVIDE	./inc/trap.h	6;"	d
T_FPERR	./inc/trap.h	22;"	d
T_GPFLT	./inc/trap.h	19;"	d
T_ILLOP	./inc/trap.h	12;"	d
T_MCHK	./inc/trap.h	24;"	d
T_NMI	./inc/trap.h	8;"	d
T_OFLOW	./inc/trap.h	10;"	d
T_PGFLT	./inc/trap.h	20;"	d
T_SEGNP	./inc/trap.h	17;"	d
T_SIMDERR	./inc/trap.h	25;"	d
T_STACK	./inc/trap.h	18;"	d
T_SYSCALL	./inc/trap.h	29;"	d
T_TSS	./inc/trap.h	16;"	d
Taskstate	./inc/mmu.h	/^struct Taskstate {$/;"	s
Taskstate::ts_cr3	./inc/mmu.h	/^	physaddr_t ts_cr3;	\/\/ Page directory base$/;"	m	struct:Taskstate	access:public
Taskstate::ts_cs	./inc/mmu.h	/^	uint16_t ts_cs;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_ds	./inc/mmu.h	/^	uint16_t ts_ds;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_eax	./inc/mmu.h	/^	uint32_t ts_eax;	\/\/ More saved state (registers)$/;"	m	struct:Taskstate	access:public
Taskstate::ts_ebp	./inc/mmu.h	/^	uintptr_t ts_ebp;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_ebx	./inc/mmu.h	/^	uint32_t ts_ebx;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_ecx	./inc/mmu.h	/^	uint32_t ts_ecx;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_edi	./inc/mmu.h	/^	uint32_t ts_edi;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_edx	./inc/mmu.h	/^	uint32_t ts_edx;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_eflags	./inc/mmu.h	/^	uint32_t ts_eflags;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_eip	./inc/mmu.h	/^	uintptr_t ts_eip;	\/\/ Saved state from last task switch$/;"	m	struct:Taskstate	access:public
Taskstate::ts_es	./inc/mmu.h	/^	uint16_t ts_es;		\/\/ Even more saved state (segment selectors)$/;"	m	struct:Taskstate	access:public
Taskstate::ts_esi	./inc/mmu.h	/^	uint32_t ts_esi;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_esp	./inc/mmu.h	/^	uintptr_t ts_esp;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_esp0	./inc/mmu.h	/^	uintptr_t ts_esp0;	\/\/ Stack pointers and segment selectors$/;"	m	struct:Taskstate	access:public
Taskstate::ts_esp1	./inc/mmu.h	/^	uintptr_t ts_esp1;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_esp2	./inc/mmu.h	/^	uintptr_t ts_esp2;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_fs	./inc/mmu.h	/^	uint16_t ts_fs;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_gs	./inc/mmu.h	/^	uint16_t ts_gs;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_iomb	./inc/mmu.h	/^	uint16_t ts_iomb;	\/\/ I\/O map base address$/;"	m	struct:Taskstate	access:public
Taskstate::ts_ldt	./inc/mmu.h	/^	uint16_t ts_ldt;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_link	./inc/mmu.h	/^	uint32_t ts_link;	\/\/ Old ts selector$/;"	m	struct:Taskstate	access:public
Taskstate::ts_padding1	./inc/mmu.h	/^	uint16_t ts_padding1;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_padding10	./inc/mmu.h	/^	uint16_t ts_padding10;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_padding2	./inc/mmu.h	/^	uint16_t ts_padding2;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_padding3	./inc/mmu.h	/^	uint16_t ts_padding3;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_padding4	./inc/mmu.h	/^	uint16_t ts_padding4;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_padding5	./inc/mmu.h	/^	uint16_t ts_padding5;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_padding6	./inc/mmu.h	/^	uint16_t ts_padding6;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_padding7	./inc/mmu.h	/^	uint16_t ts_padding7;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_padding8	./inc/mmu.h	/^	uint16_t ts_padding8;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_padding9	./inc/mmu.h	/^	uint16_t ts_padding9;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_ss	./inc/mmu.h	/^	uint16_t ts_ss;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_ss0	./inc/mmu.h	/^	uint16_t ts_ss0;	\/\/   after an increase in privilege level$/;"	m	struct:Taskstate	access:public
Taskstate::ts_ss1	./inc/mmu.h	/^	uint16_t ts_ss1;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_ss2	./inc/mmu.h	/^	uint16_t ts_ss2;$/;"	m	struct:Taskstate	access:public
Taskstate::ts_t	./inc/mmu.h	/^	uint16_t ts_t;		\/\/ Trap on task switch$/;"	m	struct:Taskstate	access:public
Trapframe	./inc/trap.h	/^struct Trapframe {$/;"	s
Trapframe::tf_cs	./inc/trap.h	/^	uint16_t tf_cs;$/;"	m	struct:Trapframe	access:public
Trapframe::tf_ds	./inc/trap.h	/^	uint16_t tf_ds;$/;"	m	struct:Trapframe	access:public
Trapframe::tf_eflags	./inc/trap.h	/^	uint32_t tf_eflags;$/;"	m	struct:Trapframe	access:public
Trapframe::tf_eip	./inc/trap.h	/^	uintptr_t tf_eip;$/;"	m	struct:Trapframe	access:public
Trapframe::tf_err	./inc/trap.h	/^	uint32_t tf_err;$/;"	m	struct:Trapframe	access:public
Trapframe::tf_es	./inc/trap.h	/^	uint16_t tf_es;$/;"	m	struct:Trapframe	access:public
Trapframe::tf_esp	./inc/trap.h	/^	uintptr_t tf_esp;$/;"	m	struct:Trapframe	access:public
Trapframe::tf_padding1	./inc/trap.h	/^	uint16_t tf_padding1;$/;"	m	struct:Trapframe	access:public
Trapframe::tf_padding2	./inc/trap.h	/^	uint16_t tf_padding2;$/;"	m	struct:Trapframe	access:public
Trapframe::tf_padding3	./inc/trap.h	/^	uint16_t tf_padding3;$/;"	m	struct:Trapframe	access:public
Trapframe::tf_padding4	./inc/trap.h	/^	uint16_t tf_padding4;$/;"	m	struct:Trapframe	access:public
Trapframe::tf_regs	./inc/trap.h	/^	struct PushRegs tf_regs;$/;"	m	struct:Trapframe	typeref:struct:Trapframe::PushRegs	access:public
Trapframe::tf_ss	./inc/trap.h	/^	uint16_t tf_ss;$/;"	m	struct:Trapframe	access:public
Trapframe::tf_trapno	./inc/trap.h	/^	uint32_t tf_trapno;$/;"	m	struct:Trapframe	access:public
UENVS	./inc/memlayout.h	116;"	d
ULIM	./inc/memlayout.h	104;"	d
UPAGES	./inc/memlayout.h	114;"	d
USED	./inc/lib.h	20;"	d
USTABDATA	./inc/memlayout.h	139;"	d
USTACKTOP	./inc/memlayout.h	128;"	d
UTEMP	./inc/memlayout.h	134;"	d
UTEXT	./inc/memlayout.h	131;"	d
UTOP	./inc/memlayout.h	123;"	d
UVPT	./inc/memlayout.h	112;"	d
UXSTACKTOP	./inc/memlayout.h	125;"	d
_CONSOLE_H_	./kern/console.h	4;"	d
_kaddr	./kern/pmap.h	/^_kaddr(const char *file, int line, physaddr_t pa)$/;"	f	signature:(const char *file, int line, physaddr_t pa)
_paddr	./kern/pmap.h	/^_paddr(const char *file, int line, void *kva)$/;"	f	signature:(const char *file, int line, void *kva)
_panic	./inc/assert.h	/^void _panic(const char*, int, const char*, ...) __attribute__((noreturn));$/;"	p	signature:(const char*, int, const char*, ...)
_warn	./inc/assert.h	/^void _warn(const char*, int, const char*, ...);$/;"	p	signature:(const char*, int, const char*, ...)
assert	./inc/assert.h	14;"	d
backtrace	./kern/trap.h	/^void backtrace(struct Trapframe *);$/;"	p	signature:(struct Trapframe *)
bool	./inc/types.h	/^typedef _Bool bool;$/;"	t
breakpoint	./inc/x86.h	/^breakpoint(void)$/;"	f	signature:(void)
breakpoint	./inc/x86.h	/^static __inline void breakpoint(void) __attribute__((always_inline));$/;"	p	signature:(void)
breakpoint_handler	./kern/trap.h	/^void breakpoint_handler(struct Trapframe*);$/;"	p	signature:(struct Trapframe*)
cons_getc	./kern/console.h	/^int cons_getc(void);$/;"	p	signature:(void)
cons_init	./kern/console.h	/^void cons_init(void);$/;"	p	signature:(void)
continue_exec	./kern/monitor.h	/^int continue_exec(int argc, char **argv, struct Trapframe *tf);$/;"	p	signature:(int argc, char **argv, struct Trapframe *tf)
cprintf	./inc/stdio.h	/^int	cprintf(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
cpuid	./inc/x86.h	/^cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)$/;"	f	signature:(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
cpuid	./inc/x86.h	/^static __inline void cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp);$/;"	p	signature:(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
cputchar	./inc/stdio.h	/^void	cputchar(int c);$/;"	p	signature:(int c)
debuginfo_eip	./kern/kdebug.h	/^int debuginfo_eip(uintptr_t eip, struct Eipdebuginfo *info);$/;"	p	signature:(uintptr_t eip, struct Eipdebuginfo *info)
e_ehsize	./inc/elf.h	/^	uint16_t e_ehsize;$/;"	m	struct:Elf	access:public
e_elf	./inc/elf.h	/^	uint8_t e_elf[12];$/;"	m	struct:Elf	access:public
e_entry	./inc/elf.h	/^	uint32_t e_entry;$/;"	m	struct:Elf	access:public
e_flags	./inc/elf.h	/^	uint32_t e_flags;$/;"	m	struct:Elf	access:public
e_machine	./inc/elf.h	/^	uint16_t e_machine;$/;"	m	struct:Elf	access:public
e_magic	./inc/elf.h	/^	uint32_t e_magic;	\/\/ must equal ELF_MAGIC$/;"	m	struct:Elf	access:public
e_phentsize	./inc/elf.h	/^	uint16_t e_phentsize;$/;"	m	struct:Elf	access:public
e_phnum	./inc/elf.h	/^	uint16_t e_phnum;$/;"	m	struct:Elf	access:public
e_phoff	./inc/elf.h	/^	uint32_t e_phoff;$/;"	m	struct:Elf	access:public
e_shentsize	./inc/elf.h	/^	uint16_t e_shentsize;$/;"	m	struct:Elf	access:public
e_shnum	./inc/elf.h	/^	uint16_t e_shnum;$/;"	m	struct:Elf	access:public
e_shoff	./inc/elf.h	/^	uint32_t e_shoff;$/;"	m	struct:Elf	access:public
e_shstrndx	./inc/elf.h	/^	uint16_t e_shstrndx;$/;"	m	struct:Elf	access:public
e_type	./inc/elf.h	/^	uint16_t e_type;$/;"	m	struct:Elf	access:public
e_version	./inc/elf.h	/^	uint32_t e_version;$/;"	m	struct:Elf	access:public
eip_file	./kern/kdebug.h	/^	const char *eip_file;		\/\/ Source code filename for EIP$/;"	m	struct:Eipdebuginfo	access:public
eip_fn_addr	./kern/kdebug.h	/^	uintptr_t eip_fn_addr;		\/\/ Address of start of function$/;"	m	struct:Eipdebuginfo	access:public
eip_fn_name	./kern/kdebug.h	/^	const char *eip_fn_name;	\/\/ Name of function containing EIP$/;"	m	struct:Eipdebuginfo	access:public
eip_fn_namelen	./kern/kdebug.h	/^	int eip_fn_namelen;		\/\/ Length of function name$/;"	m	struct:Eipdebuginfo	access:public
eip_fn_narg	./kern/kdebug.h	/^	int eip_fn_narg;		\/\/ Number of function arguments$/;"	m	struct:Eipdebuginfo	access:public
eip_line	./kern/kdebug.h	/^	int eip_line;			\/\/ Source code linenumber for EIP$/;"	m	struct:Eipdebuginfo	access:public
env_alloc	./kern/env.h	/^int	env_alloc(struct Env **e, envid_t parent_id);$/;"	p	signature:(struct Env **e, envid_t parent_id)
env_create	./kern/env.h	/^void	env_create(uint8_t *binary, enum EnvType type);$/;"	p	signature:(uint8_t *binary, enum EnvType type)
env_destroy	./kern/env.h	/^void	env_destroy(struct Env *e);	\/\/ Does not return if e == curenv$/;"	p	signature:(struct Env *e)
env_free	./kern/env.h	/^void	env_free(struct Env *e);$/;"	p	signature:(struct Env *e)
env_id	./inc/env.h	/^	envid_t env_id;			\/\/ Unique environment identifier$/;"	m	struct:Env	access:public
env_init	./kern/env.h	/^void	env_init(void);$/;"	p	signature:(void)
env_init_percpu	./kern/env.h	/^void	env_init_percpu(void);$/;"	p	signature:(void)
env_link	./inc/env.h	/^	struct Env *env_link;		\/\/ Next free Env$/;"	m	struct:Env	typeref:struct:Env::Env	access:public
env_parent_id	./inc/env.h	/^	envid_t env_parent_id;		\/\/ env_id of this env's parent$/;"	m	struct:Env	access:public
env_pgdir	./inc/env.h	/^	pde_t *env_pgdir;		\/\/ Kernel virtual address of page dir$/;"	m	struct:Env	access:public
env_pop_tf	./kern/env.h	/^void	env_pop_tf(struct Trapframe *tf) __attribute__((noreturn));$/;"	p	signature:(struct Trapframe *tf)
env_run	./kern/env.h	/^void	env_run(struct Env *e) __attribute__((noreturn));$/;"	p	signature:(struct Env *e)
env_runs	./inc/env.h	/^	uint32_t env_runs;		\/\/ Number of times environment has run$/;"	m	struct:Env	access:public
env_status	./inc/env.h	/^	unsigned env_status;		\/\/ Status of the environment$/;"	m	struct:Env	access:public
env_tf	./inc/env.h	/^	struct Trapframe env_tf;	\/\/ Saved registers$/;"	m	struct:Env	typeref:struct:Env::Trapframe	access:public
env_type	./inc/env.h	/^	enum EnvType env_type;		\/\/ Indicates special system environments$/;"	m	struct:Env	typeref:enum:Env::EnvType	access:public
envid2env	./kern/env.h	/^int	envid2env(envid_t envid, struct Env **env_store, bool checkperm);$/;"	p	signature:(envid_t envid, struct Env **env_store, bool checkperm)
envid_t	./inc/env.h	/^typedef int32_t envid_t;$/;"	t
exit	./inc/lib.h	/^void	exit(void);$/;"	p	signature:(void)
false	./inc/types.h	/^enum { false, true };$/;"	e	enum:__anon3
fprintf	./inc/stdio.h	/^int	fprintf(int fd, const char *fmt, ...);$/;"	p	signature:(int fd, const char *fmt, ...)
gd_args	./inc/mmu.h	/^	unsigned gd_args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:Gatedesc	access:public
gd_dpl	./inc/mmu.h	/^	unsigned gd_dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:Gatedesc	access:public
gd_off_15_0	./inc/mmu.h	/^	unsigned gd_off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:Gatedesc	access:public
gd_off_31_16	./inc/mmu.h	/^	unsigned gd_off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:Gatedesc	access:public
gd_p	./inc/mmu.h	/^	unsigned gd_p : 1;           \/\/ Present$/;"	m	struct:Gatedesc	access:public
gd_rsv1	./inc/mmu.h	/^	unsigned gd_rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:Gatedesc	access:public
gd_s	./inc/mmu.h	/^	unsigned gd_s : 1;           \/\/ must be 0 (system)$/;"	m	struct:Gatedesc	access:public
gd_sel	./inc/mmu.h	/^	unsigned gd_sel : 16;        \/\/ segment selector$/;"	m	struct:Gatedesc	access:public
gd_type	./inc/mmu.h	/^	unsigned gd_type : 4;        \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:Gatedesc	access:public
getchar	./inc/stdio.h	/^int	getchar(void);$/;"	p	signature:(void)
inb	./inc/x86.h	/^inb(int port)$/;"	f	signature:(int port)
inb	./inc/x86.h	/^static __inline uint8_t inb(int port) __attribute__((always_inline));$/;"	p	signature:(int port)
inl	./inc/x86.h	/^inl(int port)$/;"	f	signature:(int port)
inl	./inc/x86.h	/^static __inline uint32_t inl(int port) __attribute__((always_inline));$/;"	p	signature:(int port)
insb	./inc/x86.h	/^insb(int port, void *addr, int cnt)$/;"	f	signature:(int port, void *addr, int cnt)
insb	./inc/x86.h	/^static __inline void insb(int port, void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, void *addr, int cnt)
insl	./inc/x86.h	/^insl(int port, void *addr, int cnt)$/;"	f	signature:(int port, void *addr, int cnt)
insl	./inc/x86.h	/^static __inline void insl(int port, void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, void *addr, int cnt)
insw	./inc/x86.h	/^insw(int port, void *addr, int cnt)$/;"	f	signature:(int port, void *addr, int cnt)
insw	./inc/x86.h	/^static __inline void insw(int port, void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, void *addr, int cnt)
int16_t	./inc/types.h	/^typedef short int16_t;$/;"	t
int32_t	./inc/types.h	/^typedef int int32_t;$/;"	t
int64_t	./inc/types.h	/^typedef long long int64_t;$/;"	t
int8_t	./inc/types.h	/^typedef __signed char int8_t;$/;"	t
intptr_t	./inc/types.h	/^typedef int32_t intptr_t;$/;"	t
invlpg	./inc/x86.h	/^invlpg(void *addr)$/;"	f	signature:(void *addr)
invlpg	./inc/x86.h	/^static __inline void invlpg(void *addr) __attribute__((always_inline));$/;"	p	signature:(void *addr)
inw	./inc/x86.h	/^inw(int port)$/;"	f	signature:(int port)
inw	./inc/x86.h	/^static __inline uint16_t inw(int port) __attribute__((always_inline));$/;"	p	signature:(int port)
iscons	./inc/stdio.h	/^int	iscons(int fd);$/;"	p	signature:(int fd)
kbd_intr	./kern/console.h	/^void kbd_intr(void); \/\/ irq 1$/;"	p	signature:(void)
lcr0	./inc/x86.h	/^lcr0(uint32_t val)$/;"	f	signature:(uint32_t val)
lcr0	./inc/x86.h	/^static __inline void lcr0(uint32_t val) __attribute__((always_inline));$/;"	p	signature:(uint32_t val)
lcr3	./inc/x86.h	/^lcr3(uint32_t val)$/;"	f	signature:(uint32_t val)
lcr3	./inc/x86.h	/^static __inline void lcr3(uint32_t val) __attribute__((always_inline));$/;"	p	signature:(uint32_t val)
lcr4	./inc/x86.h	/^lcr4(uint32_t val)$/;"	f	signature:(uint32_t val)
lcr4	./inc/x86.h	/^static __inline void lcr4(uint32_t val) __attribute__((always_inline));$/;"	p	signature:(uint32_t val)
lgdt	./inc/x86.h	/^lgdt(void *p)$/;"	f	signature:(void *p)
lidt	./inc/x86.h	/^lidt(void *p)$/;"	f	signature:(void *p)
lidt	./inc/x86.h	/^static __inline void lidt(void *p) __attribute__((always_inline));$/;"	p	signature:(void *p)
lldt	./inc/x86.h	/^lldt(uint16_t sel)$/;"	f	signature:(uint16_t sel)
lldt	./inc/x86.h	/^static __inline void lldt(uint16_t sel) __attribute__((always_inline));$/;"	p	signature:(uint16_t sel)
ltr	./inc/x86.h	/^ltr(uint16_t sel)$/;"	f	signature:(uint16_t sel)
ltr	./inc/x86.h	/^static __inline void ltr(uint16_t sel) __attribute__((always_inline));$/;"	p	signature:(uint16_t sel)
mc146818_read	./kern/kclock.h	/^unsigned mc146818_read(unsigned reg);$/;"	p	signature:(unsigned reg)
mc146818_write	./kern/kclock.h	/^void mc146818_write(unsigned reg, unsigned datum);$/;"	p	signature:(unsigned reg, unsigned datum)
mem_init	./kern/pmap.h	/^void	mem_init(void);$/;"	p	signature:(void)
memcmp	./inc/string.h	/^int	memcmp(const void *s1, const void *s2, size_t len);$/;"	p	signature:(const void *s1, const void *s2, size_t len)
memcpy	./inc/string.h	/^void *	memcpy(void *dst, const void *src, size_t len);$/;"	p	signature:(void *dst, const void *src, size_t len)
memfind	./inc/string.h	/^void *	memfind(const void *s, int c, size_t len);$/;"	p	signature:(const void *s, int c, size_t len)
memmove	./inc/string.h	/^void *	memmove(void *dst, const void *src, size_t len);$/;"	p	signature:(void *dst, const void *src, size_t len)
memset	./inc/string.h	/^void *	memset(void *dst, int c, size_t len);$/;"	p	signature:(void *dst, int c, size_t len)
mon_backtrace	./kern/monitor.h	/^int mon_backtrace(int argc, char **argv, struct Trapframe *tf);$/;"	p	signature:(int argc, char **argv, struct Trapframe *tf)
mon_help	./kern/monitor.h	/^int mon_help(int argc, char **argv, struct Trapframe *tf);$/;"	p	signature:(int argc, char **argv, struct Trapframe *tf)
mon_kerninfo	./kern/monitor.h	/^int mon_kerninfo(int argc, char **argv, struct Trapframe *tf);$/;"	p	signature:(int argc, char **argv, struct Trapframe *tf)
monitor	./kern/monitor.h	/^void monitor(struct Trapframe *tf);$/;"	p	signature:(struct Trapframe *tf)
n_desc	./inc/stab.h	/^	uint16_t n_desc;        \/\/ description field$/;"	m	struct:Stab	access:public
n_other	./inc/stab.h	/^	uint8_t n_other;        \/\/ misc info (usually empty)$/;"	m	struct:Stab	access:public
n_strx	./inc/stab.h	/^	uint32_t n_strx;	\/\/ index into string table of name$/;"	m	struct:Stab	access:public
n_type	./inc/stab.h	/^	uint8_t n_type;         \/\/ type of symbol$/;"	m	struct:Stab	access:public
n_value	./inc/stab.h	/^	uintptr_t n_value;	\/\/ value of symbol$/;"	m	struct:Stab	access:public
off_t	./inc/types.h	/^typedef int32_t off_t;$/;"	t
offsetof	./inc/types.h	71;"	d
outb	./inc/x86.h	/^outb(int port, uint8_t data)$/;"	f	signature:(int port, uint8_t data)
outb	./inc/x86.h	/^static __inline void outb(int port, uint8_t data) __attribute__((always_inline));$/;"	p	signature:(int port, uint8_t data)
outl	./inc/x86.h	/^outl(int port, uint32_t data)$/;"	f	signature:(int port, uint32_t data)
outl	./inc/x86.h	/^static __inline void outl(int port, uint32_t data) __attribute__((always_inline));$/;"	p	signature:(int port, uint32_t data)
outsb	./inc/x86.h	/^outsb(int port, const void *addr, int cnt)$/;"	f	signature:(int port, const void *addr, int cnt)
outsb	./inc/x86.h	/^static __inline void outsb(int port, const void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, const void *addr, int cnt)
outsl	./inc/x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f	signature:(int port, const void *addr, int cnt)
outsl	./inc/x86.h	/^static __inline void outsl(int port, const void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, const void *addr, int cnt)
outsw	./inc/x86.h	/^outsw(int port, const void *addr, int cnt)$/;"	f	signature:(int port, const void *addr, int cnt)
outsw	./inc/x86.h	/^static __inline void outsw(int port, const void *addr, int cnt) __attribute__((always_inline));$/;"	p	signature:(int port, const void *addr, int cnt)
outw	./inc/x86.h	/^outw(int port, uint16_t data)$/;"	f	signature:(int port, uint16_t data)
outw	./inc/x86.h	/^static __inline void outw(int port, uint16_t data) __attribute__((always_inline));$/;"	p	signature:(int port, uint16_t data)
p_align	./inc/elf.h	/^	uint32_t p_align;$/;"	m	struct:Proghdr	access:public
p_filesz	./inc/elf.h	/^	uint32_t p_filesz;$/;"	m	struct:Proghdr	access:public
p_flags	./inc/elf.h	/^	uint32_t p_flags;$/;"	m	struct:Proghdr	access:public
p_memsz	./inc/elf.h	/^	uint32_t p_memsz;$/;"	m	struct:Proghdr	access:public
p_offset	./inc/elf.h	/^	uint32_t p_offset;$/;"	m	struct:Proghdr	access:public
p_pa	./inc/elf.h	/^	uint32_t p_pa;$/;"	m	struct:Proghdr	access:public
p_type	./inc/elf.h	/^	uint32_t p_type;$/;"	m	struct:Proghdr	access:public
p_va	./inc/elf.h	/^	uint32_t p_va;$/;"	m	struct:Proghdr	access:public
pa2page	./kern/pmap.h	/^pa2page(physaddr_t pa)$/;"	f	signature:(physaddr_t pa)
page2kva	./kern/pmap.h	/^page2kva(struct PageInfo *pp)$/;"	f	signature:(struct PageInfo *pp)
page2pa	./kern/pmap.h	/^page2pa(struct PageInfo *pp)$/;"	f	signature:(struct PageInfo *pp)
page_alloc	./kern/pmap.h	/^struct PageInfo *page_alloc(int alloc_flags);$/;"	p	signature:(int alloc_flags)
page_decref	./kern/pmap.h	/^void	page_decref(struct PageInfo *pp);$/;"	p	signature:(struct PageInfo *pp)
page_fault_handler	./kern/trap.h	/^void page_fault_handler(struct Trapframe *);$/;"	p	signature:(struct Trapframe *)
page_free	./kern/pmap.h	/^void	page_free(struct PageInfo *pp);$/;"	p	signature:(struct PageInfo *pp)
page_init	./kern/pmap.h	/^void	page_init(void);$/;"	p	signature:(void)
page_insert	./kern/pmap.h	/^int	page_insert(pde_t *pgdir, struct PageInfo *pp, void *va, int perm);$/;"	p	signature:(pde_t *pgdir, struct PageInfo *pp, void *va, int perm)
page_lookup	./kern/pmap.h	/^struct PageInfo *page_lookup(pde_t *pgdir, void *va, pte_t **pte_store);$/;"	p	signature:(pde_t *pgdir, void *va, pte_t **pte_store)
page_remove	./kern/pmap.h	/^void	page_remove(pde_t *pgdir, void *va);$/;"	p	signature:(pde_t *pgdir, void *va)
panic	./inc/assert.h	12;"	d
pd_base	./inc/mmu.h	/^	uint32_t pd_base;		\/\/ Base address$/;"	m	struct:Pseudodesc	access:public
pd_lim	./inc/mmu.h	/^	uint16_t pd_lim;		\/\/ Limit$/;"	m	struct:Pseudodesc	access:public
pde_t	./inc/memlayout.h	/^typedef uint32_t pde_t;$/;"	t
pgdir_walk	./kern/pmap.h	/^pte_t *pgdir_walk(pde_t *pgdir, const void *va, int create);$/;"	p	signature:(pde_t *pgdir, const void *va, int create)
physaddr_t	./inc/types.h	/^typedef uint32_t physaddr_t;$/;"	t
pp_link	./inc/memlayout.h	/^	struct PageInfo *pp_link;$/;"	m	struct:PageInfo	typeref:struct:PageInfo::PageInfo	access:public
pp_ref	./inc/memlayout.h	/^	uint16_t pp_ref;$/;"	m	struct:PageInfo	access:public
ppn_t	./inc/types.h	/^typedef uint32_t ppn_t;$/;"	t
print_regs	./kern/trap.h	/^void print_regs(struct PushRegs *regs);$/;"	p	signature:(struct PushRegs *regs)
print_trapframe	./kern/trap.h	/^void print_trapframe(struct Trapframe *tf);$/;"	p	signature:(struct Trapframe *tf)
printf	./inc/stdio.h	/^int	printf(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
printfmt	./inc/stdio.h	/^void	printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);$/;"	p	signature:(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
pte_t	./inc/memlayout.h	/^typedef uint32_t pte_t;$/;"	t
rcr0	./inc/x86.h	/^rcr0(void)$/;"	f	signature:(void)
rcr0	./inc/x86.h	/^static __inline uint32_t rcr0(void) __attribute__((always_inline));$/;"	p	signature:(void)
rcr2	./inc/x86.h	/^rcr2(void)$/;"	f	signature:(void)
rcr2	./inc/x86.h	/^static __inline uint32_t rcr2(void) __attribute__((always_inline));$/;"	p	signature:(void)
rcr3	./inc/x86.h	/^rcr3(void)$/;"	f	signature:(void)
rcr3	./inc/x86.h	/^static __inline uint32_t rcr3(void) __attribute__((always_inline));$/;"	p	signature:(void)
rcr4	./inc/x86.h	/^rcr4(void)$/;"	f	signature:(void)
rcr4	./inc/x86.h	/^static __inline uint32_t rcr4(void) __attribute__((always_inline));$/;"	p	signature:(void)
read_ebp	./inc/x86.h	/^read_ebp(void)$/;"	f	signature:(void)
read_ebp	./inc/x86.h	/^static __inline uint32_t read_ebp(void) __attribute__((always_inline));$/;"	p	signature:(void)
read_eflags	./inc/x86.h	/^read_eflags(void)$/;"	f	signature:(void)
read_eflags	./inc/x86.h	/^static __inline uint32_t read_eflags(void) __attribute__((always_inline));$/;"	p	signature:(void)
read_esp	./inc/x86.h	/^read_esp(void)$/;"	f	signature:(void)
read_esp	./inc/x86.h	/^static __inline uint32_t read_esp(void) __attribute__((always_inline));$/;"	p	signature:(void)
read_tsc	./inc/x86.h	/^read_tsc(void)$/;"	f	signature:(void)
read_tsc	./inc/x86.h	/^static __inline uint64_t read_tsc(void) __attribute__((always_inline));$/;"	p	signature:(void)
readline	./inc/lib.h	/^char*	readline(const char *buf);$/;"	p	signature:(const char *buf)
readline	./inc/stdio.h	/^char*	readline(const char *prompt);$/;"	p	signature:(const char *prompt)
reg_eax	./inc/trap.h	/^	uint32_t reg_eax;$/;"	m	struct:PushRegs	access:public
reg_ebp	./inc/trap.h	/^	uint32_t reg_ebp;$/;"	m	struct:PushRegs	access:public
reg_ebx	./inc/trap.h	/^	uint32_t reg_ebx;$/;"	m	struct:PushRegs	access:public
reg_ecx	./inc/trap.h	/^	uint32_t reg_ecx;$/;"	m	struct:PushRegs	access:public
reg_edi	./inc/trap.h	/^	uint32_t reg_edi;$/;"	m	struct:PushRegs	access:public
reg_edx	./inc/trap.h	/^	uint32_t reg_edx;$/;"	m	struct:PushRegs	access:public
reg_esi	./inc/trap.h	/^	uint32_t reg_esi;$/;"	m	struct:PushRegs	access:public
reg_oesp	./inc/trap.h	/^	uint32_t reg_oesp;		\/* Useless *\/$/;"	m	struct:PushRegs	access:public
sd_avl	./inc/mmu.h	/^	unsigned sd_avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:Segdesc	access:public
sd_base_15_0	./inc/mmu.h	/^	unsigned sd_base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:Segdesc	access:public
sd_base_23_16	./inc/mmu.h	/^	unsigned sd_base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:Segdesc	access:public
sd_base_31_24	./inc/mmu.h	/^	unsigned sd_base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:Segdesc	access:public
sd_db	./inc/mmu.h	/^	unsigned sd_db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:Segdesc	access:public
sd_dpl	./inc/mmu.h	/^	unsigned sd_dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:Segdesc	access:public
sd_g	./inc/mmu.h	/^	unsigned sd_g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:Segdesc	access:public
sd_lim_15_0	./inc/mmu.h	/^	unsigned sd_lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:Segdesc	access:public
sd_lim_19_16	./inc/mmu.h	/^	unsigned sd_lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:Segdesc	access:public
sd_p	./inc/mmu.h	/^	unsigned sd_p : 1;          \/\/ Present$/;"	m	struct:Segdesc	access:public
sd_rsv1	./inc/mmu.h	/^	unsigned sd_rsv1 : 1;       \/\/ Reserved$/;"	m	struct:Segdesc	access:public
sd_s	./inc/mmu.h	/^	unsigned sd_s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:Segdesc	access:public
sd_type	./inc/mmu.h	/^	unsigned sd_type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:Segdesc	access:public
serial_intr	./kern/console.h	/^void serial_intr(void); \/\/ irq 4$/;"	p	signature:(void)
sh_addr	./inc/elf.h	/^	uint32_t sh_addr;$/;"	m	struct:Secthdr	access:public
sh_addralign	./inc/elf.h	/^	uint32_t sh_addralign;$/;"	m	struct:Secthdr	access:public
sh_entsize	./inc/elf.h	/^	uint32_t sh_entsize;$/;"	m	struct:Secthdr	access:public
sh_flags	./inc/elf.h	/^	uint32_t sh_flags;$/;"	m	struct:Secthdr	access:public
sh_info	./inc/elf.h	/^	uint32_t sh_info;$/;"	m	struct:Secthdr	access:public
sh_link	./inc/elf.h	/^	uint32_t sh_link;$/;"	m	struct:Secthdr	access:public
sh_name	./inc/elf.h	/^	uint32_t sh_name;$/;"	m	struct:Secthdr	access:public
sh_offset	./inc/elf.h	/^	uint32_t sh_offset;$/;"	m	struct:Secthdr	access:public
sh_size	./inc/elf.h	/^	uint32_t sh_size;$/;"	m	struct:Secthdr	access:public
sh_type	./inc/elf.h	/^	uint32_t sh_type;$/;"	m	struct:Secthdr	access:public
single_step	./kern/monitor.h	/^int single_step(int argc, char **argv, struct Trapframe *tf);$/;"	p	signature:(int argc, char **argv, struct Trapframe *tf)
size_t	./inc/types.h	/^typedef uint32_t size_t;$/;"	t
snprintf	./inc/stdio.h	/^int	snprintf(char *str, int size, const char *fmt, ...);$/;"	p	signature:(char *str, int size, const char *fmt, ...)
ssize_t	./inc/types.h	/^typedef int32_t ssize_t;$/;"	t
static_assert	./inc/assert.h	18;"	d
strcat	./inc/string.h	/^char *	strcat(char *dst, const char *src);$/;"	p	signature:(char *dst, const char *src)
strchr	./inc/string.h	/^char *	strchr(const char *s, char c);$/;"	p	signature:(const char *s, char c)
strcmp	./inc/string.h	/^int	strcmp(const char *s1, const char *s2);$/;"	p	signature:(const char *s1, const char *s2)
strcpy	./inc/string.h	/^char *	strcpy(char *dst, const char *src);$/;"	p	signature:(char *dst, const char *src)
strfind	./inc/string.h	/^char *	strfind(const char *s, char c);$/;"	p	signature:(const char *s, char c)
strlcpy	./inc/string.h	/^size_t	strlcpy(char *dst, const char *src, size_t size);$/;"	p	signature:(char *dst, const char *src, size_t size)
strlen	./inc/string.h	/^int	strlen(const char *s);$/;"	p	signature:(const char *s)
strncmp	./inc/string.h	/^int	strncmp(const char *s1, const char *s2, size_t size);$/;"	p	signature:(const char *s1, const char *s2, size_t size)
strncpy	./inc/string.h	/^char *	strncpy(char *dst, const char *src, size_t size);$/;"	p	signature:(char *dst, const char *src, size_t size)
strnlen	./inc/string.h	/^int	strnlen(const char *s, size_t size);$/;"	p	signature:(const char *s, size_t size)
strtol	./inc/string.h	/^long	strtol(const char *s, char **endptr, int base);$/;"	p	signature:(const char *s, char **endptr, int base)
sys_cgetc	./inc/lib.h	/^int	sys_cgetc(void);$/;"	p	signature:(void)
sys_cputs	./inc/lib.h	/^void	sys_cputs(const char *string, size_t len);$/;"	p	signature:(const char *string, size_t len)
sys_env_destroy	./inc/lib.h	/^int	sys_env_destroy(envid_t);$/;"	p	signature:(envid_t)
sys_getenvid	./inc/lib.h	/^envid_t	sys_getenvid(void);$/;"	p	signature:(void)
syscall	./kern/syscall.h	/^int32_t syscall(uint32_t num, uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4, uint32_t a5);$/;"	p	signature:(uint32_t num, uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4, uint32_t a5)
system_call_handler	./kern/trap.h	/^int32_t system_call_handler(struct Trapframe*);$/;"	p	signature:(struct Trapframe*)
tf_cs	./inc/trap.h	/^	uint16_t tf_cs;$/;"	m	struct:Trapframe	access:public
tf_ds	./inc/trap.h	/^	uint16_t tf_ds;$/;"	m	struct:Trapframe	access:public
tf_eflags	./inc/trap.h	/^	uint32_t tf_eflags;$/;"	m	struct:Trapframe	access:public
tf_eip	./inc/trap.h	/^	uintptr_t tf_eip;$/;"	m	struct:Trapframe	access:public
tf_err	./inc/trap.h	/^	uint32_t tf_err;$/;"	m	struct:Trapframe	access:public
tf_es	./inc/trap.h	/^	uint16_t tf_es;$/;"	m	struct:Trapframe	access:public
tf_esp	./inc/trap.h	/^	uintptr_t tf_esp;$/;"	m	struct:Trapframe	access:public
tf_padding1	./inc/trap.h	/^	uint16_t tf_padding1;$/;"	m	struct:Trapframe	access:public
tf_padding2	./inc/trap.h	/^	uint16_t tf_padding2;$/;"	m	struct:Trapframe	access:public
tf_padding3	./inc/trap.h	/^	uint16_t tf_padding3;$/;"	m	struct:Trapframe	access:public
tf_padding4	./inc/trap.h	/^	uint16_t tf_padding4;$/;"	m	struct:Trapframe	access:public
tf_regs	./inc/trap.h	/^	struct PushRegs tf_regs;$/;"	m	struct:Trapframe	typeref:struct:Trapframe::PushRegs	access:public
tf_ss	./inc/trap.h	/^	uint16_t tf_ss;$/;"	m	struct:Trapframe	access:public
tf_trapno	./inc/trap.h	/^	uint32_t tf_trapno;$/;"	m	struct:Trapframe	access:public
tlb_invalidate	./kern/pmap.h	/^void	tlb_invalidate(pde_t *pgdir, void *va);$/;"	p	signature:(pde_t *pgdir, void *va)
tlbflush	./inc/x86.h	/^static __inline void tlbflush(void) __attribute__((always_inline));$/;"	p	signature:(void)
tlbflush	./inc/x86.h	/^tlbflush(void)$/;"	f	signature:(void)
trap_init	./kern/trap.h	/^void trap_init(void);$/;"	p	signature:(void)
trap_init_percpu	./kern/trap.h	/^void trap_init_percpu(void);$/;"	p	signature:(void)
true	./inc/types.h	/^enum { false, true };$/;"	e	enum:__anon3
ts_cr3	./inc/mmu.h	/^	physaddr_t ts_cr3;	\/\/ Page directory base$/;"	m	struct:Taskstate	access:public
ts_cs	./inc/mmu.h	/^	uint16_t ts_cs;$/;"	m	struct:Taskstate	access:public
ts_ds	./inc/mmu.h	/^	uint16_t ts_ds;$/;"	m	struct:Taskstate	access:public
ts_eax	./inc/mmu.h	/^	uint32_t ts_eax;	\/\/ More saved state (registers)$/;"	m	struct:Taskstate	access:public
ts_ebp	./inc/mmu.h	/^	uintptr_t ts_ebp;$/;"	m	struct:Taskstate	access:public
ts_ebx	./inc/mmu.h	/^	uint32_t ts_ebx;$/;"	m	struct:Taskstate	access:public
ts_ecx	./inc/mmu.h	/^	uint32_t ts_ecx;$/;"	m	struct:Taskstate	access:public
ts_edi	./inc/mmu.h	/^	uint32_t ts_edi;$/;"	m	struct:Taskstate	access:public
ts_edx	./inc/mmu.h	/^	uint32_t ts_edx;$/;"	m	struct:Taskstate	access:public
ts_eflags	./inc/mmu.h	/^	uint32_t ts_eflags;$/;"	m	struct:Taskstate	access:public
ts_eip	./inc/mmu.h	/^	uintptr_t ts_eip;	\/\/ Saved state from last task switch$/;"	m	struct:Taskstate	access:public
ts_es	./inc/mmu.h	/^	uint16_t ts_es;		\/\/ Even more saved state (segment selectors)$/;"	m	struct:Taskstate	access:public
ts_esi	./inc/mmu.h	/^	uint32_t ts_esi;$/;"	m	struct:Taskstate	access:public
ts_esp	./inc/mmu.h	/^	uintptr_t ts_esp;$/;"	m	struct:Taskstate	access:public
ts_esp0	./inc/mmu.h	/^	uintptr_t ts_esp0;	\/\/ Stack pointers and segment selectors$/;"	m	struct:Taskstate	access:public
ts_esp1	./inc/mmu.h	/^	uintptr_t ts_esp1;$/;"	m	struct:Taskstate	access:public
ts_esp2	./inc/mmu.h	/^	uintptr_t ts_esp2;$/;"	m	struct:Taskstate	access:public
ts_fs	./inc/mmu.h	/^	uint16_t ts_fs;$/;"	m	struct:Taskstate	access:public
ts_gs	./inc/mmu.h	/^	uint16_t ts_gs;$/;"	m	struct:Taskstate	access:public
ts_iomb	./inc/mmu.h	/^	uint16_t ts_iomb;	\/\/ I\/O map base address$/;"	m	struct:Taskstate	access:public
ts_ldt	./inc/mmu.h	/^	uint16_t ts_ldt;$/;"	m	struct:Taskstate	access:public
ts_link	./inc/mmu.h	/^	uint32_t ts_link;	\/\/ Old ts selector$/;"	m	struct:Taskstate	access:public
ts_padding1	./inc/mmu.h	/^	uint16_t ts_padding1;$/;"	m	struct:Taskstate	access:public
ts_padding10	./inc/mmu.h	/^	uint16_t ts_padding10;$/;"	m	struct:Taskstate	access:public
ts_padding2	./inc/mmu.h	/^	uint16_t ts_padding2;$/;"	m	struct:Taskstate	access:public
ts_padding3	./inc/mmu.h	/^	uint16_t ts_padding3;$/;"	m	struct:Taskstate	access:public
ts_padding4	./inc/mmu.h	/^	uint16_t ts_padding4;$/;"	m	struct:Taskstate	access:public
ts_padding5	./inc/mmu.h	/^	uint16_t ts_padding5;$/;"	m	struct:Taskstate	access:public
ts_padding6	./inc/mmu.h	/^	uint16_t ts_padding6;$/;"	m	struct:Taskstate	access:public
ts_padding7	./inc/mmu.h	/^	uint16_t ts_padding7;$/;"	m	struct:Taskstate	access:public
ts_padding8	./inc/mmu.h	/^	uint16_t ts_padding8;$/;"	m	struct:Taskstate	access:public
ts_padding9	./inc/mmu.h	/^	uint16_t ts_padding9;$/;"	m	struct:Taskstate	access:public
ts_ss	./inc/mmu.h	/^	uint16_t ts_ss;$/;"	m	struct:Taskstate	access:public
ts_ss0	./inc/mmu.h	/^	uint16_t ts_ss0;	\/\/   after an increase in privilege level$/;"	m	struct:Taskstate	access:public
ts_ss1	./inc/mmu.h	/^	uint16_t ts_ss1;$/;"	m	struct:Taskstate	access:public
ts_ss2	./inc/mmu.h	/^	uint16_t ts_ss2;$/;"	m	struct:Taskstate	access:public
ts_t	./inc/mmu.h	/^	uint16_t ts_t;		\/\/ Trap on task switch$/;"	m	struct:Taskstate	access:public
uint16_t	./inc/types.h	/^typedef unsigned short uint16_t;$/;"	t
uint32_t	./inc/types.h	/^typedef unsigned int uint32_t;$/;"	t
uint64_t	./inc/types.h	/^typedef unsigned long long uint64_t;$/;"	t
uint8_t	./inc/types.h	/^typedef unsigned char uint8_t;$/;"	t
uintptr_t	./inc/types.h	/^typedef uint32_t uintptr_t;$/;"	t
umain	./inc/lib.h	/^void	umain(int argc, char **argv);$/;"	p	signature:(int argc, char **argv)
user_mem_assert	./kern/pmap.h	/^void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);$/;"	p	signature:(struct Env *env, const void *va, size_t len, int perm)
user_mem_check	./kern/pmap.h	/^int	user_mem_check(struct Env *env, const void *va, size_t len, int perm);$/;"	p	signature:(struct Env *env, const void *va, size_t len, int perm)
va_arg	./inc/stdarg.h	10;"	d
va_end	./inc/stdarg.h	12;"	d
va_list	./inc/stdarg.h	/^typedef __builtin_va_list va_list;$/;"	t
va_start	./inc/stdarg.h	8;"	d
vcprintf	./inc/stdio.h	/^int	vcprintf(const char *fmt, va_list);$/;"	p	signature:(const char *fmt, va_list)
vfprintf	./inc/stdio.h	/^int	vfprintf(int fd, const char *fmt, va_list);$/;"	p	signature:(int fd, const char *fmt, va_list)
vprintfmt	./inc/stdio.h	/^void	vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list);$/;"	p	signature:(void (*putch)(int, void*), void *putdat, const char *fmt, va_list)
vsnprintf	./inc/stdio.h	/^int	vsnprintf(char *str, int size, const char *fmt, va_list);$/;"	p	signature:(char *str, int size, const char *fmt, va_list)
warn	./inc/assert.h	11;"	d
write_eflags	./inc/x86.h	/^static __inline void write_eflags(uint32_t eflags) __attribute__((always_inline));$/;"	p	signature:(uint32_t eflags)
write_eflags	./inc/x86.h	/^write_eflags(uint32_t eflags)$/;"	f	signature:(uint32_t eflags)
xchg	./inc/x86.h	/^xchg(volatile uint32_t *addr, uint32_t newval)$/;"	f	signature:(volatile uint32_t *addr, uint32_t newval)
